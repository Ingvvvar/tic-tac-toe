{"version":3,"sources":["components/Square/Square.tsx","components/Board/Board.tsx","components/Game/Game.tsx","helper.ts","App.tsx","index.tsx"],"names":["Square","onClick","value","type","className","Board","squares","click","map","square","i","uuidv4","Game","useState","Array","fill","board","setBoard","xIsNext","setXIsNext","wX","setWx","wO","setWo","winner","lines","length","a","b","c","calculateWinner","champion","toString","clear","prev","index","boardCopy","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAOaA,EAA0B,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACjD,OACE,8BACE,wBAAQC,KAAK,SAASC,UAAU,SAASH,QAASA,EAAlD,SAA4DC,OCDrDG,EAAyB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAChD,OACE,qBAAKH,UAAU,QAAf,SAEIE,EAAQE,KAAI,SAACC,EAAQC,GAAT,OACV,cAAC,EAAD,CAAuBR,MAAOO,EAAQR,QAAS,kBAAMM,EAAMG,KAA9CC,qBCVhB,IAAMC,EAAiB,WAC5B,MAA0BC,mBAASC,MAAM,GAAGC,KAAK,OAAjD,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAoBN,mBAAS,GAA7B,mBAAOO,EAAP,KAAWC,EAAX,KACA,EAAoBR,mBAAS,GAA7B,mBAAOS,EAAP,KAAWC,EAAX,KACMC,ECTD,SAAyBlB,GAY9B,IAXA,IAAMmB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAf,EAAI,EAAGA,EAAIe,EAAMC,OAAQhB,GAAK,EAAG,CACxC,kBAAkBe,EAAMf,GAAxB,GAAOiB,EAAP,KAAUC,EAAV,KAAaC,EAAb,KAEA,GAAIvB,EAAQqB,IAAMrB,EAAQqB,KAAOrB,EAAQsB,IAAMtB,EAAQqB,KAAOrB,EAAQuB,GACpE,OAAOvB,EAAQqB,GAInB,OAAO,KDXQG,CAAgBd,GACzBe,EAAQ,OAAGP,QAAH,IAAGA,OAAH,EAAGA,EAAQQ,WAcnBC,EAAQ,WACZhB,EAASH,MAAM,GAAGC,KAAK,OACvBI,GAAW,GAEM,MAAbY,GACFV,GAAM,SAACa,GAAD,OAAUA,EAAO,KAGR,MAAbH,GACFR,GAAM,SAACW,GAAD,OAAUA,EAAO,MAU3B,OACE,sBAAK9B,UAAU,UAAf,UACE,cAAC,EAAD,CAAOE,QAASU,EAAOT,MAjCP,SAAC4B,GACnB,IAAMC,EAAS,YAAOpB,GAElBQ,GAAUY,EAAUD,KAIxBC,EAAUD,GAASjB,EAAU,IAAM,IACnCD,EAASmB,GACTjB,GAAYD,OAyBV,sBAAKd,UAAU,OAAf,UACE,wCACA,4CAEG,IACAgB,KAGH,4CAEG,IACAE,KAlBL,wBAAQnB,KAAK,SAASC,UAAU,aAAaH,QAASgC,EAAtD,yFAqBE,sBAAM7B,UAAU,aAAhB,SACGoB,EAAM,uEAAiBA,GAAjB,8EAA4CN,EAAU,IAAM,cExDhEmB,EAAgB,kBAC3B,qBAAKjC,UAAU,UAAf,SACE,cAAC,EAAD,OCFJkC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1cef17d1.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  onClick: () => void;\n  value: number;\n};\n\nexport const Square: React.FC<Props> = ({ onClick, value }) => {\n  return (\n    <div>\n      <button type=\"button\" className=\"square\" onClick={onClick}>{value}</button>\n    </div>\n  );\n};\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Square } from '../Square';\n\ninterface Props {\n  squares: number[];\n  click: (index: number) => void;\n}\n\nexport const Board: React.FC<Props> = ({ squares, click }) => {\n  return (\n    <div className=\"board\">\n      {\n        squares.map((square, i) => (\n          <Square key={uuidv4()} value={square} onClick={() => click(i)} />\n        ))\n      }\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Board } from '../Board';\nimport { calculateWinner } from '../../helper';\n\nexport const Game: React.FC = () => {\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n  const [wX, setWx] = useState(0);\n  const [wO, setWo] = useState(0);\n  const winner = calculateWinner(board);\n  const champion = winner?.toString();\n\n  const handleClick = (index: number) => {\n    const boardCopy = [...board];\n\n    if (winner || boardCopy[index]) {\n      return;\n    }\n\n    boardCopy[index] = xIsNext ? 'X' : 'O';\n    setBoard(boardCopy);\n    setXIsNext(!xIsNext);\n  };\n\n  const clear = () => {\n    setBoard(Array(9).fill(null));\n    setXIsNext(true);\n\n    if (champion === 'X') {\n      setWx((prev) => prev + 1);\n    }\n\n    if (champion === 'O') {\n      setWo((prev) => prev + 1);\n    }\n  };\n\n  const startNewGame = () => {\n    return (\n      <button type=\"button\" className=\"start__btn\" onClick={clear}> Очистить поле </button>\n    );\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <Board squares={board} click={handleClick} />\n      <div className=\"info\">\n        <div>Score</div>\n        <div>\n          Player X:\n          {' '}\n          {wX}\n        </div>\n\n        <div>\n          Player O:\n          {' '}\n          {wO}\n        </div>\n        {startNewGame()}\n        <span className=\"game__info\">\n          {winner ? `Победитель ${winner}` : `Сейчас ходит ${xIsNext ? 'X' : 'O'}`}\n        </span>\n      </div>\n    </div>\n  );\n};\n","export function calculateWinner(squares: number[]) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n","import React from 'react';\nimport './App.scss';\n\nimport { Game } from './components/Game';\n\nexport const App: React.FC = () => (\n  <div className=\"starter\">\n    <Game />\n  </div>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}